#include <iostream>
#include <string>
#include <vector>
#include <cstdlib> // for system()
#include <ctime>   // for time()
#include <iomanip> // for setw()
using namespace std;

struct Zombie
{
    vector<int> zombie_HP_vector;
    vector<int> zombie_attack_vector;
    vector<int> zombie_range_vector;
};
Zombie zombie;

void zombie_display(int no);
int *get_zombie_HP(int num);
int *get_zombie_attack(int numZom);
int *get_zombie_range(int numofZ);



// CHANGE SETTINGS
void changeSettings(int &x_axis, int &y_axis, int &zombie)
{
    cout << "|*****************************************| " << endl;
    cout << "|              Board Settings             |" << endl;
    cout << "|*****************************************|" << endl;
    cout << endl;
    cout << " Please enter odd numbers only. " << endl;
    cout << " Enter number of board rows     =>  ";
    cin >> x_axis;

    // Check if the x-axis dimension is an odd number
    while (x_axis % 2 == 0)
    {
        cout << "Please enter odd numbers only." << endl;
        cout << "Enter number of rows: ";
        cin >> x_axis;
    }

    cout << " Enter number of board columns  =>  ";
    cin >> y_axis;

    // Check if the y-axis dimension is an odd number
    while (y_axis % 2 == 0)
    {
        cout << "Please enter odd numbers only." << endl;
        cout << "Enter number of columns: ";
        cin >> y_axis;
    }

    cout << "|*****************************************| " << endl;
    cout << "|             Zombies Settings            |" << endl;
    cout << "|*****************************************|" << endl;
    cout << " Enter number of zombies        =>  ";
    cin >> zombie;
    cout << endl;
    cout << " Settings Updated." << endl;
}

// BOARD CREATION
void createBoard(int x_axis, int y_axis, int zombie)
{
    char characters[] = {' ', '^', 'v', '>', '<', 'h', 'p', 'r', ' '};

    cout << "################################" << endl;
    cout << " ...::: Alien vs Zombie :::... " << endl;
    cout << "################################" << endl;
    char board[x_axis][y_axis];

    int numofobject = 9;
    for (int i = 0; i < x_axis; i++)
    {
        for (int j = 0; j < y_axis; j++)
        {
            int no = rand() % numofobject;
            board[i][j] = characters[no];
        }
    }

    // Place the Alien at the center of the game board
    int centerRow = x_axis / 2;
    int centerCol = y_axis / 2;
    board[centerRow][centerCol] = 'A';

    if (x_axis >= 10 || y_axis >= 10)
    {
        cout << " ";
        for (int i = 1; i <= y_axis; i++) //+1
        {
            cout << i % 10 << " ";
        }
        cout << endl;
    }
    for (int i = 0; i < x_axis; i++)
    {
        cout << " ";
        for (int j = 0; j < y_axis; ++j)
        {
            cout << "+-";
        }
        cout << "+" << endl;
        // display row number
        cout << setw(2) << (y_axis - i);
        // display the border
        for (int j = 0; j < y_axis; ++j)
        {
            cout << "|" << board[i][j];
        }
        cout << "|" << endl;
    }
}

void quit()
{
    string state;
    cout << endl;
    if (state == "quit")
    {
        cout << "Are you sure to quit game (Y/N) : ";
        cin >> state;
        if ((state == "Y") || (state == "y"))
        {
            exit(0);
        }
        else
        {
            system("pause");
        }
    }
}

// DEFAULT SETTINGS

void displayMainMenu(int x_axis, int y_axis, int zombie)
{

    char answer;
    cout << " __________________________________________" << endl;
    cout << "|          Default Game Settings          |" << endl;
    cout << "|_________________________________________|" << endl;
    cout << "|                                         |" << endl;
    cout << "|   Number of Board Rows     =>  " << x_axis << "        |" << endl;
    cout << "|   Number of Board Columns  =>  " << y_axis << "        |" << endl;
    cout << "|   Number of Zombies        =>  " << zombie << "        |" << endl;
    cout << "|_________________________________________|" << endl;
    cout << endl;
    cout << " Do you want to change the settings? (y/n) or press h for help => ";
    cin >> answer;
    answer = toupper(answer);
    if (answer == 'Y')
    {
        changeSettings(x_axis, y_axis, zombie);
        displayMainMenu(x_axis, y_axis, zombie);
    }
    else if (answer == 'N')
    {
        cout << "Let's play" << endl;
    }
    else if (answer == 'H')
    {

        char back;
        cout << " ..::Command list prompt::.. " << endl;
        cout << "       up   = move up " << endl;
        cout << "      down  = move down" << endl;
        cout << "      left  = move left" << endl;
        cout << "      right = move down" << endl;
        cout << "        h   = help     " << endl;
        cout << "      quit  = close program" << endl;
        cout << "      space = empty    " << endl;
        cout << endl;
        cout << endl;
        cout << "Press R to return to main menu" << endl;
        cin >> back;
        if (char back = 'r')
        {
            displayMainMenu(x_axis, y_axis, zombie);
        }
    }
    else
    {
        cout << "Input Error!" << endl;
        cout << endl;
        displayMainMenu(x_axis, y_axis, zombie);
    }
}

// BOARD CREATION
void createBoard(int x_axis, int y_axis, int zombie, int x, int y)
{
    char characters[] = {' ', '^', 'v', '>', '<', 'h', 'p', 'r', ' '};
    int xx = 0;
    int yy = 0;

    char board[x_axis][y_axis];

    int numofobject = 9;
    for (int i = 0; i < x_axis; i++)
    {
        for (int j = 0; j < y_axis; j++)
        {
            int no = rand() % numofobject;
            board[i][j] = characters[no];
        }
    }

    // Place the Alien at the center of the game board
    int centerRow = x_axis / 2;
    int centerCol = y_axis / 2;

    while (true)
    {

        cout << "################################" << endl;
        cout << " ...::: Alien vs Zombie :::... " << endl;
        cout << "################################" << endl;

        if (centerRow + xx == -1 || centerRow + xx == x_axis || centerCol + yy == -1 || centerCol + yy == y_axis)
            break;
        board[centerRow + xx][centerCol + yy] = 'A';

        if (x_axis >= 10 || y_axis >= 10)
        {
            cout << " ";
            for (int i = 1; i <= y_axis; i++) //+1
            {
                cout << i % 10 << " ";
            }
            cout << endl;
        }
        for (int i = 0; i < x_axis; i++)
        {
            cout << " ";
            for (int j = 0; j < y_axis; ++j)
            {
                cout << "+-";
            }
            cout << "+" << endl;
            // display row number
            cout << setw(2) << (y_axis - i);
            // display the border
            for (int j = 0; j < y_axis; ++j)
            {
                cout << "|" << board[i][j];
            }
            cout << "|" << endl;
        }
        cout << endl
             << endl;
        system("pause");
        board[centerRow + xx][centerCol + yy] = '.';

        if (x == 1)
        {
            xx--;
        }
        else if (x == -1)
        {
            xx++;
        }
        else if (y == 1)
        {
            yy++;
        }
        else if (y == -1)
        {
            yy--;
        }
    }
}

// void up()
//{
//	int x, y;
//	bool found = false;
//
//	for(int i = 0; i < x_axis; i++)
//	{
//		if(found)
//			break;
//		for(int j = 0; j < y_axis; j++)
//		{
//			if(board[i][j] == 'A')
//			{
//				x = i;
//				y = j;
//				found = true;
//				break;
//			}
//		}
//	}
//
//	board[x][y] = '.';
// }

int main()
{
    srand(time(0));
    int numZombies = 9;

    for (int i = 0; i < numZombies; i++)
    {
        zombie.zombie_HP_vector.push_back(rand() % 20 + 1);
        zombie.zombie_attack_vector.push_back(rand() % 5 + 1);
        zombie.zombie_range_vector
.push_back(rand() % 10 + 1);
    }

    cout << "All Zombie Details: \n";
    zombie_display(numZombies);
    

    int x_axis; // board of rows
    cout << "Enter number of board rows(odd numbers only):";
    cin >> x_axis;
    int y_axis; // board of column
    cout << "Enter number of board columns(odd numbers only):";
    cin >> y_axis;
    int zombie; // the number of zombies
    cout << "Enter number zombie:";
    cin >> zombie;
    displayMainMenu(x_axis, y_axis, zombie);
    createBoard(x_axis, y_axis, zombie);

    cout << endl
         << endl
         << "Command > ";
    string cmd;
    cin >> cmd;

    if (cmd == "up")
    {
        createBoard(x_axis, y_axis, zombie, 1, 0);
    }
    else if (cmd == "down")
    {
        createBoard(x_axis, y_axis, zombie, -1, 0);
    }
    else if (cmd == "right")
    {
        createBoard(x_axis, y_axis, zombie, 0, 1);
    }
    else if (cmd == "left")
    {
        createBoard(x_axis, y_axis, zombie, 0, -1);
    }

    system("pause");
    


    return 0;
}

void zombie_display(int no)
{
    int b = no;

    for (int i = 0; i < b; i++)
    {
        cout << '\n'
             << "  Zombie " << i + 1 << " | Health point :" << zombie.zombie_HP_vector[i] << "| Attack  " << zombie.zombie_attack_vector[i] << "| Range " << zombie.zombie_range_vector
        [i];
    }
    cout << endl;
}

int *get_zombie_HP(int num)
{
    int numZ = num;
    static int Zhp[9];

    for (int i = 0; i < numZ; i++)
    {
        Zhp[i] = zombie.zombie_HP_vector[i];
    }
    return Zhp;
}

int *get_zombie_attack(int numZom)
{
    int Zonum = numZom;
    static int Zatk[9];

    for (int i = 0; i < numZom; i++)
    {
        Zatk[i] = zombie.zombie_attack_vector[i];
    }
    return Zatk;
}

int *get_zombie_range(int numofZ)
{
    int Znumber = numofZ;
    static int Zrge[9];

    for (int i = 0; i < Znumber; i++)
    {
        Zrge[i] = zombie.zombie_range_vector
[i];
    }
  return Zrge;
}
